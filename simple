#!/usr/bin/perl

use warnings;
use strict;

use Data::Dumper qw(Dumper);

my %dances =
(
   "2ST"=>'1',
   "WCS"=>'1',
   "CHA"=>'1',
   "WTZ"=>'1',
   "ECS"=>'1',
   "NC2"=>'1',
   "PLK"=>'1',
   "TR2"=>'1',
);

# Song.create!(name: "Super Sad Song Title", artist: "Tracy Atkins", bpm: 95, dance: "nc", cpl_length: 2.14, proam_length: 1.7, cpl_phrasing: [2, 2, 3, 4, 5], proam_phrasing: [2, 2, 3, 4, 5])

print "starting the thing\n";
my $date = `date +%s`;
chomp $date;
open FILE, "<new_uc" or die $!;
my @lines = <FILE>;
my $line_no = 1;

my %types = 
(
   '1'=>'dance',
   '2'=>'bpm',
   '3'=>'name',
   '4'=>'artist',
   '5'=>'phrasing',
   '6'=>'length',
   '0'=>'year',
);
my $song_idx = 1;

my $proam_phrasing = "";
my $cpl_phrasing = "";

my %songs = ();
# hashes temporarily storing the values being read
my %curr_song = (); 
my %prev_song = ();

sub dprint ($)
{
   my $line = shift;
   print "===============================\n";
   print "\"$line\"\n";
   print "===============================\n";
}
my $curr_name = "";
my $prev_name = "";
my $is_same_song = 0;
##############################################################
####  Subroutines
##############################################################
# prompt to stdout a yes/no question with a provided prompt
# and return the answer to the caller (1 for yes, 0 for no)

sub write_ruby_seed() {

}

sub write_json() {

}

sub yn_prompt( $ ) {
    my $prompt = shift;
    my $answer = "";
    while( $answer !~ /^[yn]/i ) {
        print "\n" . $prompt . " y/n \n";
        print "> ";
        $answer = <STDIN>;
    }
    if( $answer =~ /^y/i ) {
        return 1;
    }
    return 0;
}


foreach my $line (@lines)
{
   chomp $line;
   my $idx = $line_no % 7;
   my $type = $types{$idx};
   if($line eq "") {
   } else {
      #dprint($type is $line);
      if ($type =~ /phrasing/ ) {
         #dprint("GOT PHRASING TYPE");
         if( $line =~ /^Couples (.*)$/ ) {
            $cpl_phrasing = $1;
            $curr_song{'cpl_phrasing'} = $cpl_phrasing;
         }
         elsif( $line =~ /^ProAm (.*)$/ ) {
            $proam_phrasing = $1;
            $curr_song{'proam_phrasing'} = $proam_phrasing;
         }
         else {
            die "$line_no: WHAT DATA TYPE IS THIS???\"$line\"\n";
         }
      }
      else {
         $curr_song{$type} = $line;
         if( $type =~ /name/ ) {
            $curr_name = $line;
            if($prev_name and ($curr_name eq $prev_name)) {
               $is_same_song = 1;
            }
         }
         # end of song info
         if( $type =~ /year/ ) { 
            if($is_same_song)
            {
               $curr_song{'cpl_phrasing'} = $prev_song{'cpl_phrasing'};
               $prev_song{'proam_phrasing'} = $curr_song{'proam_phrasing'};
            }
            #print "$curr_name - - > ";
            #print Dumper(\%curr_song);
            my %curr_song_copy = %curr_song;
            $prev_name = $curr_name;
            if (scalar keys %curr_song > 0) {
               $songs{$curr_name} = \%curr_song_copy;
            }
            else {
               print "nothing in current song!\n";
               print "line_no = $line_no\n";
               die  "line = $line\n";
            }
            print Dumper($songs{$curr_name});
            %prev_song = %curr_song;
            %curr_song = ();
         }
      }
      $line_no++;
   }
}
close FILE;

yn_prompt("Continue?");
print Dumper(\%songs);
